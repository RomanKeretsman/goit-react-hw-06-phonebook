{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/Filter/Filter.module.scss","components/ContactItem/ContactItem.module.scss","components/Logo/Logo.module.scss","components/AddContactButton/AddContactButton.module.scss","components/Container/Container.module.scss","components/IconButton/IconButton.module.scss","components/ContactList/slide.module.scss","components/ContactList/ContactList.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Container/Container.jsx","components/Logo/Logo.jsx","components/AddContactButton/AddContactButton.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.container.jsx","components/Filter/Filter.jsx","components/Filter/Filter.container.jsx","components/IconButton/IconButton.jsx","assets/images/delete.svg","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","App.jsx","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","Container","children","className","styles","container","defaultProps","Logo","itemRef","createRef","CSSTransition","in","appear","timeout","classNames","nodeRef","title","ref","AddContactButton","button__wrapper","type","button","ContactForm","hanldeChange","event","currentTarget","value","setState","hanldeSubmit","preventDefault","props","normalizedName","toLowerCase","nameInContacts","find","contact","numberInContacts","onSubmit","resetForm","toast","info","autoClose","this","form","label","placeholder","aria-label","input","onChange","pattern","required","Component","connect","dispatch","contactsActions","Filter","IconButton","onClick","allyProps","_path","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgDelete","_ref","svgRef","titleId","xmlns","viewBox","d","ForwardRef","ContactItem","onDeleteContact","item","href","width","height","fill","ContactList","TransitionGroup","component","list","map","slideTransition","getfilteredContacts","allContacts","normalizedFilter","includes","App","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ff5c5565.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__hKwjS\",\"label\":\"ContactForm_label__1ixRy\",\"input\":\"ContactForm_input__2VVzy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__1VqhK\",\"label\":\"Filter_label__XPIpQ\",\"input\":\"Filter_input__abYTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__ZoeWh\",\"name\":\"ContactItem_name__3H3GC\",\"number\":\"ContactItem_number__2JZrq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Logo_title__2lFCj\",\"appear\":\"Logo_appear__OaRHi\",\"appearActive\":\"Logo_appearActive__25dYa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button__wrapper\":\"AddContactButton_button__wrapper__3xG2v\",\"button\":\"AddContactButton_button__42Ghw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1cp9b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"IconButton\":\"IconButton_IconButton__10kG0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__17E-2\",\"enterActive\":\"slide_enterActive__1gzJU\",\"exit\":\"slide_exit__1m1U4\",\"exitActive\":\"slide_exitActive__KWLYC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3o8KP\"};","import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена\nimport { nanoid } from 'nanoid';\n\n// Создание экшена для добавления контакта: type + payload + Prepare Callback\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\n// Создание экшена для удаления контакта\nconst deleteContact = createAction('contacts/delete');\n\n// Создание экшена для фильтра\nconst changeFilter = createAction('contacts/change-filter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux'; // Импорт функции комбайна редюсеров\nimport { createReducer } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\n\nimport actions from './contacts-actions'; // Импорт экшенов из контактов\n\n// Создание редюсера для массива items в контактах (добавление контакта и удаление)\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\n// Создание редюсера для фильтра в контактах\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\n// Экспорт всех редюсеров через комбайн\nexport default combineReducers({ items, filter });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // Импорт функции создания хранилища и прослойки\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'; // Импорт функции персистеров и фикса консоли\nimport storage from 'redux-persist/lib/storage'; // Импорт локального хранилища из библиотеки персиста\nimport logger from 'redux-logger'; // Импорт функции логгирования\nimport contactsReducer from './contacts/contacts-reducer'; // Импорт редюсера по контактам\n\n// Конфиг персиста для контактов с блеклистом\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\n// Создание прослоек + логгер. Важен порядок!\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// Создание хранилища (корневой редюсер + прослойки + тулзы только для разработки)\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// Обёртка хранилища в персистор\nconst persistor = persistStore(store);\n\n// Экспорт хранилища и обёртки хранилища\n// eslint-disable-next-line\nexport default { store, persistor };\n","import PropTypes from 'prop-types';\nimport styles from './Container.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.defaultProps = {\n  children: [],\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React, { createRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport styles from './Logo.module.scss';\n\nconst Logo = () => {\n  const itemRef = createRef(null);\n\n  return (\n    <CSSTransition\n      in={true}\n      appear={true}\n      timeout={800}\n      classNames={styles}\n      nodeRef={itemRef}\n    >\n      <h1 className={styles.title} ref={itemRef}>\n        PhoneBook\n      </h1>\n    </CSSTransition>\n  );\n};\n\nexport default Logo;\n","import styles from './AddContactButton.module.scss';\n\nconst AddContactButton = () => (\n  <div className={styles.button__wrapper}>\n    <button type=\"submit\" className={styles.button}>\n      Add contact\n    </button>\n  </div>\n);\n\nexport default AddContactButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToastContainer, toast } from 'react-toastify';\n\nimport AddContactButton from '../AddContactButton';\n\nimport styles from './ContactForm.module.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass ContactForm extends Component {\n  // Стейт формы\n  state = {\n    name: '',\n    number: '',\n  };\n\n  // Следит за инпутом и пишет в локальный стейт его значение\n  hanldeChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // Метод на отправке формы. Формирует из стейта контакт и передает во внешний метод\n  hanldeSubmit = event => {\n    event.preventDefault();\n\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const normalizedName = name.toLowerCase();\n\n    // Проверка на дубликат по имени\n    const nameInContacts = contacts.find(\n      contact => contact.name === normalizedName,\n    );\n\n    // Проверка на дубликат по номеру\n    const numberInContacts = contacts.find(\n      contact => contact.number === number,\n    );\n\n    // Отправка данных после проверки в экшн\n    if (!nameInContacts && !numberInContacts) {\n      this.props.onSubmit(normalizedName, number);\n      this.resetForm();\n      return;\n    }\n\n    toast.info(`${name} is already in contacts`, {\n      autoClose: 2500,\n    });\n  };\n\n  // Сброс полей формы (после отправки)\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={styles.form} onSubmit={this.hanldeSubmit}>\n        <label className={styles.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Contact name\"\n            aria-label=\"Input for your name\"\n            className={styles.input}\n            value={name} // Значение с локального стейта\n            onChange={this.hanldeChange} // Наблюдающий метод\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label className={styles.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone number\"\n            aria-label=\"Input for your phone number\"\n            className={styles.input}\n            value={number} // Значение с локального стейта\n            onChange={this.hanldeChange} // Наблюдающий метод\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <AddContactButton />\n\n        <ToastContainer />\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import { connect } from 'react-redux'; // Импорт функции коннекта к хранилищу\nimport contactsActions from '../../redux/contacts/contacts-actions'; // Импорт экшенов из контактов\n\nimport ContactForm from './ContactForm';\n\n// Из глобального стейта в пропы компонента\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n});\n\n// Из глобального стейта в пропы компонента - методы\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsActions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nimport styles from './Filter.module.scss';\n\n// Принимает значение с поля фильтра и метод пишущий в стейт\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      <h2 className={styles.title}>Contacts</h2>\n\n      <label className={styles.label}>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find...\"\n          className={styles.input}\n          value={value}\n          onChange={onChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.defaultProps = {\n  value: '',\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contacts-actions';\n\nimport Filter from './Filter';\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: event =>\n    dispatch(contactsActions.changeFilter(event.currentTarget.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import PropTypes from 'prop-types';\n\nimport styles from './IconButton.module.scss';\n\nconst IconButton = ({ children, onClick, ...allyProps }) => (\n  <button\n    type=\"button\"\n    className={styles.IconButton}\n    onClick={onClick}\n    {...allyProps}\n  >\n    {children}\n  </button>\n);\n\nIconButton.defaultProps = {\n  onClick: () => null,\n  children: null,\n};\n\nIconButton.propTypes = {\n  onClick: PropTypes.func,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string.isRequired,\n};\n\nexport default IconButton;\n","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgDelete(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 41.756 41.756\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M27.948 20.878L40.291 8.536a5 5 0 10-7.07-7.071L20.878 13.809 8.535 1.465a5 5 0 00-7.07 7.071l12.342 12.342L1.465 33.22a5 5 0 107.07 7.071l12.343-12.342 12.343 12.343c.976.977 2.256 1.464 3.535 1.464s2.56-.487 3.535-1.464a5 5 0 000-7.071L27.948 20.878z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDelete);\nexport default __webpack_public_path__ + \"static/media/delete.d02651e3.svg\";\nexport { ForwardRef as ReactComponent };","import IconButton from '../IconButton';\nimport { ReactComponent as DeleteIcon } from '../../assets/images/delete.svg';\n\nimport styles from './ContactItem.module.scss';\n\n// Принимает один контакт и метод для удаления контакта\nconst ContactItem = ({ contact, onDeleteContact }) => {\n  return (\n    <li className={styles.item}>\n      <span className={styles.name}>{contact.name}</span>\n      <a href={`tel:${contact.number}`} className={styles.number}>\n        {contact.number}\n      </a>\n\n      <IconButton onClick={onDeleteContact} aria-label=\"Delete contact\">\n        <DeleteIcon width=\"20px\" height=\"20px\" fill=\"#a7a1a1\" />\n      </IconButton>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport ContactItem from '../ContactItem';\n// import popTransition from './pop.module.scss';\nimport slideTransition from './slide.module.scss';\nimport styles from './ContactList.module.scss';\n\n// Принимает все контакты и пробрасывает дальше метод для удаления контакта\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={500}\n          classNames={slideTransition}\n        >\n          <ContactItem\n            key={contact.id}\n            contact={contact}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { connect } from 'react-redux'; // Импортируем коннект для глобального хранилища\nimport contactsActions from '../../redux/contacts/contacts-actions'; // Импортируем экшны для диспатчинга\n\nimport ContactList from './ContactList';\n\n// // Фильтрует и возвращает результат фильтра\nconst getfilteredContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\n// Из стейта в пропы + в контакты пишет результат функции фильтра\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getfilteredContacts(items, filter),\n});\n\n// Из стейта в пропы - методы\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import Container from './components/Container';\nimport Logo from './components/Logo';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nconst App = () => {\n  return (\n    <Container>\n      <Logo />\n\n      <ContactForm />\n\n      <Filter />\n\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'; // Импорт провайдера для хранилища\nimport { PersistGate } from 'redux-persist/integration/react'; // Импорт гейта для персиста\nimport store from './redux/store'; // Импорт обьекта из стора (хранилище и персистор)\n\nimport App from './App.jsx';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './App.module.scss';\n\nReactDOM.render(\n  <Provider store={store.store}>\n    <PersistGate loading={null} persistor={store.persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}